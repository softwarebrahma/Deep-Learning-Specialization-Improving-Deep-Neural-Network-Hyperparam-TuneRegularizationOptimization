
In [1]: x = np.zeros(2,3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    x = np.zeros(2,3)
TypeError: data type not understood

In [2]: x = np.zeros((2,3))

In [3]: print(x)
[[ 0.  0.  0.]
 [ 0.  0.  0.]]

In [4]: 

====

In [1]: np.random.rand?
Docstring:
rand(d0, d1, ..., dn)

Random values in a given shape.

Create an array of the given shape and populate it with
random samples from a uniform distribution
over ``[0, 1)``.

Parameters
----------
d0, d1, ..., dn : int, optional
    The dimensions of the returned array, should all be positive.
    If no argument is given a single Python float is returned.

Returns
-------
out : ndarray, shape ``(d0, d1, ..., dn)``
    Random values.

See Also
--------
random

Notes
-----
This is a convenience function. If you want an interface that
takes a shape-tuple as the first argument, refer to
np.random.random_sample .

Examples
--------
>>> np.random.rand(3,2)
array([[ 0.14022471,  0.96360618],  #random
       [ 0.37601032,  0.25528411],  #random
       [ 0.49313049,  0.94909878]]) #random
Type:      builtin_function_or_method

In [2]: 

In [2]: np.random.randn?
Docstring:
randn(d0, d1, ..., dn)

Return a sample (or samples) from the "standard normal" distribution.

If positive, int_like or int-convertible arguments are provided,
`randn` generates an array of shape ``(d0, d1, ..., dn)``, filled
with random floats sampled from a univariate "normal" (Gaussian)
distribution of mean 0 and variance 1 (if any of the :math:`d_i` are
floats, they are first converted to integers by truncation). A single
float randomly sampled from the distribution is returned if no
argument is provided.

This is a convenience function.  If you want an interface that takes a
tuple as the first argument, use `numpy.random.standard_normal` instead.

Parameters
----------
d0, d1, ..., dn : int, optional
    The dimensions of the returned array, should be all positive.
    If no argument is given a single Python float is returned.

Returns
-------
Z : ndarray or float
    A ``(d0, d1, ..., dn)``-shaped array of floating-point samples from
    the standard normal distribution, or a single such float if
    no parameters were supplied.

See Also
--------
random.standard_normal : Similar, but takes a tuple as its argument.

Notes
-----
For random samples from :math:`N(\mu, \sigma^2)`, use:

``sigma * np.random.randn(...) + mu``

Examples
--------
>>> np.random.randn()
2.1923875335537315 #random

Two-by-four array of samples from N(3, 6.25):

>>> 2.5 * np.random.randn(2, 4) + 3
array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],  #random
       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]]) #random
Type:      builtin_function_or_method

In [3]: 

In [3]: print(np.random.rand())
0.17791241384867684

In [4]: print(np.random.rand())
0.7154247654360434

In [5]: print(np.random.rand())
0.22970898622895208

In [6]: print(np.random.rand())
0.6244587654441079

In [7]: print(np.random.randn())
1.1307361981492832

In [8]: print(np.random.randn())
1.8967373401985992

In [9]: print(np.random.randn())
0.0558129559385882

In [10]: print(np.random.randn())
0.36295894153904584

In [11]: print(np.random.randn())
-0.11963938633862849

In [12]: print(np.random.randn())
-0.4057108087289625

In [13]: print(np.random.randn())
0.2656076441536544

In [14]: print(np.random.randn())
1.1197342972365687

In [15]: print(np.random.randn())
-2.1627484385034075

In [16]: 

====

