
In [1]: param = {'w1':10, 'w2':20}

In [2]: print(param)
{'w1': 10, 'w2': 20}

In [3]:
In [4]: print(len(param))
2

In [5]: print(len(param) / 2)
1.0

In [6]: print(len(param) // 2)
1

In [7]: 

======

In [1]: import numpy as np

In [2]: x = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])

In [3]: print(x)
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]

In [5]: permutation = np.random.permutation(x.shape[1])

In [6]: print(permutation)
[3 0 2 1]

In [7]: permutation = list(np.random.permutation(x.shape[1]))

In [8]: print(permutation)
[3, 1, 0, 2]

In [9]: np.random.permutation?
Docstring:
permutation(x)

Randomly permute a sequence, or return a permuted range.

If `x` is a multi-dimensional array, it is only shuffled along its
first index.

Parameters
----------
x : int or array_like
    If `x` is an integer, randomly permute ``np.arange(x)``.
    If `x` is an array, make a copy and shuffle the elements
    randomly.

Returns
-------
out : ndarray
    Permuted sequence or array range.

Examples
--------
>>> np.random.permutation(10)
array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6])

>>> np.random.permutation([1, 4, 9, 12, 15])
array([15,  1,  9,  4, 12])

>>> arr = np.arange(9).reshape((3, 3))
>>> np.random.permutation(arr)
array([[6, 7, 8],
       [0, 1, 2],
       [3, 4, 5]])
Type:      builtin_function_or_method


In [10]: list?
Init signature: list(self, /, *args, **kwargs)
Docstring:
list() -> new empty list
list(iterable) -> new list initialized from iterable's items
Type:           type


In [11]: print(x[:,[1,2]])
[[ 2  3]
 [ 6  7]
 [10 11]]

In [12]: print(x)
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]

In [13]: permutation = list(np.random.permutation(x.shape[1]))

In [14]: print(permutation)
[0, 2, 1, 3]

In [15]: x_shuffle = x[:,permutation]

In [16]: print(x_shuffle)
[[ 1  3  2  4]
 [ 5  7  6  8]
 [ 9 11 10 12]]

In [17]: 


======

In [17]: import math

In [18]: print(math.floor(x.shape[1]/2))
2

In [19]: print(math.floor(x.shape[1]+1/2))
4

In [20]: print(math.floor((x.shape[1]+1)/2))
2

In [21]: math.floor
Out[21]: <function math.floor>

In [22]: math.floor?
Docstring:
floor(x)

Return the floor of x as an Integral.
This is the largest integer <= x.
Type:      builtin_function_or_method

In [23]: 


=====

In [24]: print(x_shuffle)
[[ 1  3  2  4]
 [ 5  7  6  8]
 [ 9 11 10 12]]

In [25]: print(x_shuffle[:,0:2])
[[ 1  3]
 [ 5  7]
 [ 9 11]]

In [26]: print(x_shuffle[:,2:2])
[]

In [27]: print(x_shuffle[:,2:4])
[[ 2  4]
 [ 6  8]
 [10 12]]

In [28]: 


=====

In [1]: import numpy as np
In [2]: x = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
In [3]: print(x)
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
In [4]: y = np.zeros(x.shape)
In [5]: print(y)
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
In [6]: z = np.zeros((x.shape[0], x.shape[1]))
In [7]: print(z)
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
In [8]: print(y.shape)
(3, 4)
In [9]: print(z.shape)
(3, 4)
In [10]: 


=====

In [10]: beta = 2
In [11]: beta ** 3
Out[11]: 8
In [12]: beta = 4
In [13]: beta ** 3
Out[13]: 64
In [14]: 

=====


