
Until now, you've always used numpy to build neural networks. Now we will step you through a deep learning framework that will allow you to build neural networks more easily. 

Machine learning frameworks like TensorFlow, PaddlePaddle, Torch, Caffe, Keras, and many others can speed up your machine learning development significantly.

Programing frameworks can not only shorten your coding time, but sometimes also perform optimizations that speed up your code.


=====

Writing and running programs in TensorFlow has the following steps:

	- Create Tensors (variables) that are not yet executed/evaluated.
	
	- Write operations between those Tensors. (put in the 'computation graph')

	- Initialize your Tensors.

	- Create a Session.

	- Run the Session. This will run the operations you'd written above (run the 'computation graph' above).
	
To summarize, remember to initialize your variables, create a session and run the operations inside the session.

A placeholder is an object whose value you can specify only later. To specify values for a placeholder, you can pass in values by using a "feed dictionary" (feed_dict variable) when invoking session.run(). 
	- A placeholder is simply a variable that you will assign data to only later, when running the session. We say that you feed data to these placeholders when running the session.

When you specify the operations needed for a computation, you are telling TensorFlow how to construct a computation graph. The computation graph can have some placeholders whose values you will specify only later. Finally, when you run the session, you are telling TensorFlow to execute the computation graph.


=====

tf.matmul(..., ...) to do a matrix multiplication

Tensorflow offers a variety of commonly used neural network functions like tf.sigmoid and tf.softmax.

Note that there are two typical ways to create and use sessions in tensorflow:

Method 1:

sess = tf.Session()
# Run the variables initialization (if needed), run the operations
result = sess.run(..., feed_dict = {...})
sess.close() # Close the session
Method 2:

with tf.Session() as sess: 
    # run the variables initialization (if needed), run the operations
    result = sess.run(..., feed_dict = {...})
    # This takes care of closing the session for you :)

To summarize, you how know how to:

Create placeholders
Specify the computation graph corresponding to operations you want to compute
Create the session
Run the session, using a feed dictionary if necessary to specify placeholder variables' values.

	
=====

You can also use a built-in function to compute the cost of your neural network.

For the cross entropy loss. The function you will use is:

tf.nn.sigmoid_cross_entropy_with_logits(logits = ...,  labels = ...)

Your code should input z, compute the sigmoid (to get a) and then compute the cross entropy cost J . All this can be done using one call to tf.nn.sigmoid_cross_entropy_with_logits, which computes

−1 / m ∑i=1..m ( y(i)logσ(z[2](i)) + ( 1 − y(i))log( 1 − σ(z[2](i)) ) )


=====

Using One Hot encodings:

Many times in deep learning you will have a y vector with numbers ranging from 0 to C-1, where C is the number of classes. If C is for example 4, then you might have the following y vector which you will need to convert as follows:

This is called a "one hot" encoding, because in the converted representation exactly one element of each column is "hot" (meaning set to 1). To do this conversion in numpy, you might have to write a few lines of code. In tensorflow, you can use one line of code:

tf.one_hot(indices, depth, axis)


=====

Initialize with zeros and ones:

Now you will learn how to initialize a vector of zeros and ones. The function you will be calling is tf.ones(). To initialize with zeros you could use tf.zeros() instead. These functions take in a shape and return an array of dimension shape full of zeros and ones respectively.


=====

There are essentially two parts to implement a tensorflow model:

	1. Create the computation graph
	
	2. Run the graph
	

The tensorflow model is almost the same as one we previously built in numpy for cat recognition (but now using a softmax output). 

The model is LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SOFTMAX. The SIGMOID output layer has been converted to a SOFTMAX. A SOFTMAX layer generalizes SIGMOID to when there are more than two classes.


1. Your first task is to create placeholders for X and Y in tensorflow. This will allow you to later pass your training data in when you run your session.

	- You will use None when specifying the shape because it let's us be flexible on the number of examples you will pass for the placeholders.


2. Your second task is to initialize the parameters of the model in tensorflow.

	- You are going use Xavier Initialization for weights and Zero Initialization for biases.
		- tf.contrib.layers.xavier_initializer(seed = 1)
		- tf.zeros_initializer()

Eg:
W1 = tf.get_variable("W1", [25,12288], initializer = tf.contrib.layers.xavier_initializer(seed = 1))
b1 = tf.get_variable("b1", [25,1], initializer = tf.zeros_initializer())


3. Next task is to implement the forward propagation in tensorflow.

	- The function will take in a dictionary of parameters and will complete the forward pass.
	- The functions you will be using are:
		tf.add(...,...) to do an addition
		tf.matmul(...,...) to do a matrix multiplication
		tf.nn.relu(...) to apply the ReLU activation

It is important to note that the forward propagation stops at z3. The reason is that in tensorflow the last linear layer output is given as input to the function computing the loss. Therefore, you don't need a3!

You may have noticed that the forward propagation doesn't output any cache. You will understand why below, when we get to brackpropagation.


4. Next task is to compute the Cost in tensorflow
	- We can use the below functions,
		tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = ..., labels = ...))
	- It is important to know that the "logits" and "labels" inputs of tf.nn.softmax_cross_entropy_with_logits are expected to be of shape (number of examples, num_classes). We have thus transposed Z3 and Y for you.
		- tf.transpose(Z3)
		- tf.transpose(Y)
	- Besides, tf.reduce_mean basically does the summation over the examples.


5. Backward propagation & parameter updates - This is where you become grateful to programming frameworks. All the backpropagation and the parameters update is taken care of in 1 line of code.
	- After you compute the cost function. You will create an "optimizer" object.
	- You have to call this object along with the cost when running the tf.session. When called, it will perform an optimization on the given cost with the chosen method and learning rate.
	- For instance, for gradient descent the optimizer would be:
		optimizer = tf.train.GradientDescentOptimizer(learning_rate = learning_rate).minimize(cost)
	- To make the optimization you would do:
		_ , c = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})
			- When coding, we often use _ as a "throwaway" variable to store values that we won't need to use later. 
			- Here, _ takes on the evaluated value of optimizer, which we don't need (and c takes the value of the cost variable).

6. Building the model by calling the functions above that you had previously implemented
	- Amazing, your algorithm can recognize a sign representing a figure between 0 and 5 with 71.7% accuracy.


Insights:

	- Your model seems big enough to fit the training set well. However, given the difference between train and test accuracy, you could try to add L2 or dropout regularization to reduce overfitting.
	
	- Think about the session as a block of code to train the model. Each time you run the session on a minibatch, it trains the parameters. In total you have run the session a large number of times (1500 epochs) until you obtained well trained parameters.

You indeed deserved a "thumbs-up" although as you can see the algorithm seems to classify it incorrectly. The reason is that the training set doesn't contain any "thumbs-up", so the model doesn't know how to deal with it!. We call that a "mismatched data distribution" and it is one of the various things on the next course on "Structuring Machine Learning Projects".	


===

SUMMARY:

What you should remember:

	- Tensorflow is a programming framework used in deep learning
	
	- The two main object classes in tensorflow are Tensors and Operators.

	- When you code in tensorflow you have to take the following steps:

		- Create a graph containing Tensors (Variables, Placeholders ...) and Operations (tf.matmul, tf.add, ...)

		- Create a session

		- Initialize the session

		- Run the session to execute the graph

	- You can execute the graph multiple times as you've seen in model()

	- The backpropagation and optimization is automatically done when running the session on the "optimizer" object.


========

TensorFlow Links:

https://mapr.com/blog/deep-learning-tensorflow/
https://mapr.com/blog/deep-learning-tensorflow/
https://mapr.com/blog/deep-learning-tensorflow/

https://en.wikipedia.org/wiki/TensorFlow

https://www.tensorflow.org/

https://www.tensorflow.org/get_started/

https://www.tensorflow.org/programmers_guide/

tensorflow java api
https://www.tensorflow.org/install/install_java

https://www.tensorflow.org/api_docs/python/tf/zeros_initializer

https://www.tensorflow.org/api_docs/python/tf/reset_default_graph


