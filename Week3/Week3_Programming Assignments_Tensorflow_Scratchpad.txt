
In [8]: x = np.round(np.random.randn(2, 3, 3))
In [9]: print(x)
[[[-1. -3. -1.]
  [ 1. -1.  2.]
  [ 0.  0.  1.]]
 [[ 0. -1.  1.]
  [ 1.  0. -1.]
  [-0. -0.  1.]]]
In [10]: x_flattened_in_row_vectors = x.reshape(x.shape[0], -1)
In [11]: print(x_flattened_in_row_vectors.shape)
(2, 9)
In [13]: 
In [14]: print(x_flattened_in_row_vectors)
[[-1. -3. -1.  1. -1.  2.  0.  0.  1.]
 [ 0. -1.  1.  1.  0. -1. -0. -0.  1.]]
In [15]: 
In [15]: x_final_flattened_after_transpose = x_flattened_in_row_vectors.T
In [16]: print(x_final_flattened_after_transpose)
[[-1.  0.]
 [-3. -1.]
 [-1.  1.]
 [ 1.  1.]
 [-1.  0.]
 [ 2. -1.]
 [ 0. -0.]
 [ 0. -0.]
 [ 1.  1.]]
In [17]: 
In [17]: print(x_final_flattened_after_transpose.shape)
(9, 2)
In [18]: 

In [18]: x_final_in_one_line = x.reshape(x.shape[0], -1).T
In [19]: print(x_final_in_one_line)
[[-1.  0.]
 [-3. -1.]
 [-1.  1.]
 [ 1.  1.]
 [-1.  0.]
 [ 2. -1.]
 [ 0. -0.]
 [ 0. -0.]
 [ 1.  1.]]
In [20]: print(x_final_in_one_line.shape)
(9, 2)
In [21]: 

==============

x = tf.constant([[1., 1.], [2., 2.]])
tf.reduce_mean(x)  # 1.5
tf.reduce_mean(x, 0)  # [1.5, 1.5]
tf.reduce_mean(x, 1)  # [1.,  2.]

==============

